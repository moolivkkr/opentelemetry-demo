# Copyright The OpenTelemetry Authors
# SPDX-License-Identifier: Apache-2.0

extensions:
  basicauth/client:
    client_auth:
      username: ${env:AWS_OPENSEARCH_USERNAME}
      password: ${env:AWS_OPENSEARCH_PASSWORD}

receivers:
  otlp:
    protocols:
      grpc:
        endpoint: ${env:OTEL_COLLECTOR_HOST}:${env:OTEL_COLLECTOR_PORT_GRPC}
      http:
        endpoint: ${env:OTEL_COLLECTOR_HOST}:${env:OTEL_COLLECTOR_PORT_HTTP}
        cors:
          allowed_origins:
            - "http://*"
            - "https://*"
  httpcheck/frontendproxy:
    targets:
      - endpoint: http://frontendproxy:${env:ENVOY_PORT}
  docker_stats:
    endpoint: unix:///var/run/docker.sock
  redis:
    endpoint: "valkey-cart:6379"
    username: "valkey"
    collection_interval: 10s
  # Host metrics
  hostmetrics:
    root_path: /hostfs
    scrapers:
      cpu:
        metrics:
          system.cpu.utilization:
            enabled: true
      disk:
      load:
      filesystem:
        exclude_mount_points:
          mount_points:
            - /dev/*
            - /proc/*
            - /sys/*
            - /run/k3s/containerd/*
            - /var/lib/docker/*
            - /var/lib/kubelet/*
            - /snap/*
          match_type: regexp
        exclude_fs_types:
          fs_types:
            - autofs
            - binfmt_misc
            - bpf
            - cgroup2
            - configfs
            - debugfs
            - devpts
            - devtmpfs
            - fusectl
            - hugetlbfs
            - iso9660
            - mqueue
            - nsfs
            - overlay
            - proc
            - procfs
            - pstore
            - rpc_pipefs
            - securityfs
            - selinuxfs
            - squashfs
            - sysfs
            - tracefs
          match_type: strict
      memory:
        metrics:
          system.memory.utilization:
            enabled: true
      network:
      paging:
      processes:
      process:
        mute_process_exe_error: true
        mute_process_io_error: true
        mute_process_user_error: true
  # Collector metrics
  prometheus:
    config:
      scrape_configs:
        - job_name: 'otelcol'
          scrape_interval: 10s
          static_configs:
            - targets: ['0.0.0.0:8888']

exporters:
  # to be removed after testing drapper changes
  # debug:
  # otlp:
  #   endpoint: "jaeger:4317"
  #   tls:
  #     insecure: true
  # otlphttp/prometheus:
  #   endpoint: "http://prometheus:9090/api/v1/otlp"
  #   tls:
  #     insecure: true
  # opensearch:
  #   logs_index: otel
  #   http:
  #     endpoint: "http://opensearch:9200"
  #     tls:
  #       insecure: true


  debug:
  otlp:    
    endpoint: "jaeger:4317"
    tls:
      insecure: true
      insecure_skip_verify: true
  otlphttp/prometheus:
    endpoint: "http://prometheus:9090/metrics"
    tls:
      insecure: true
  opensearch/traces:
    http:
      endpoint: ${env:AWS_OPENSEARCH_ENDPOINT}
      auth:
        authenticator: basicauth/client
      tls:
        insecure: false
        insecure_skip_verify: true
    timeout:
    retry_on_failure:
      enabled: true
      initial_interval: 100000000
      randomization_factor: 0.5
    dataset: traces
  opensearch/logs:
    http:
      endpoint: ${env:AWS_OPENSEARCH_ENDPOINT}
      auth:
        authenticator: basicauth/client
      tls:
        insecure: false
        insecure_skip_verify: true
    timeout:
    retry_on_failure:
      enabled: true
      initial_interval: 100000000
      randomization_factor: 0.5
    dataset: logs
  otlp/traces:
    endpoint: "data-prepper:21890"
    tls:
      insecure: true
      insecure_skip_verify: true
  otlp/metrics:
    endpoint: "data-prepper:21891"
    tls:
      insecure: true
      insecure_skip_verify: true
  otlp/logs:
    endpoint: "data-prepper:21892"
    tls:
      insecure: true
      insecure_skip_verify: true


processors:
  batch:
  filter/ottl:
    error_mode: ignore
    metrics:
      metric:
        # FIXME: remove when a Metrics View is implemented in the checkout and productcatalog components
        # or when this issue is resolved: https://github.com/open-telemetry/opentelemetry-go-contrib/issues/3071
        - 'name == "rpc.server.duration"'
  transform/metrics:
    metric_statements:
      - context: metric
        statements:
          # FIXME: remove when this issue is resolved: https://github.com/open-telemetry/opentelemetry-java/issues/4834
          - set(description, "") where name == "queueSize"
          # FIXME: remove when this issue is resolved: https://github.com/open-telemetry/opentelemetry-python-contrib/issues/1958
          - set(description, "") where name == "http.client.duration"
  transform/spans:
    error_mode: ignore
    trace_statements:
      - context: span
        statements:
          # could be removed when https://github.com/vercel/next.js/pull/64852 is fixed upstream
          - replace_pattern(name, "\\?.*", "")
          - replace_match(name, "GET /api/products/*", "GET /api/products/{productId}")

connectors:
  spanmetrics:

service:
  extensions: [basicauth/client]
  pipelines:
    traces:
      receivers: [otlp]
      processors: [transform/spans, batch]
      exporters: [otlp, debug, spanmetrics, otlp/traces]
    metrics:
      receivers: [hostmetrics, docker_stats, httpcheck/frontendproxy, otlp, prometheus, redis, spanmetrics]
      processors: [filter/ottl, transform/metrics, batch]
      exporters: [ otlp/metrics,debug]
    logs:
      receivers: [otlp]
      processors: [batch]
      exporters: [otlp/logs,  debug]
